{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Home","react_default","a","createElement","className","alt","src","FourOhFour","CorgiMachine","_ref","match","Switch","Route","exact","path","render","Link","to","concat","url","component","CorgiSizer","CorgiSizerWithName","_ref2","params","width","height","_ref3","dogName","App_CorgiSizer","App","HashRouter","Boolean","window","location","hostname","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.93594614.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  //BrowserRouter as Router,\n  HashRouter as Router,\n  Route,\n  Link,\n  Switch\n} from 'react-router-dom';\n\nconst App = () => (\n  <Router>\n    <div className=\"app\">\n      <h1>Welcome to Corgi Viewer 3.0!</h1>\n      <nav>\n        <ul>\n          <li>\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li>\n            <Link to=\"/machine\">Corgi Machine</Link>\n          </li>\n          <li>\n            <Link to=\"/about\">About</Link>\n          </li>\n        </ul>\n      </nav>\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <Route\n          path=\"/about\"\n          render={() => (\n            <div className=\"about\">\n              <h2>About</h2>\n              <p>\n                This is a simple <code>Route</code> that uses the render prop.\n              </p>\n              <p>\n                It is not <code>exact</code> so you can append to the route and\n                still get this content.\n              </p>\n            </div>\n          )}\n        />\n        <Route path=\"/machine\" component={CorgiMachine} />\n        <Route component={FourOhFour} />\n      </Switch>\n    </div>\n  </Router>\n);\n\nconst Home = () => (\n  <div className=\"home\">\n    <h2>Home</h2>\n    <p>You came here to check out corgis, yes?</p>\n    <img\n      alt=\"Corgi tongue stuck in jar\"\n      src=\"https://i.ytimg.com/vi/mRnvAhhckOM/hqdefault.jpg\"\n    />\n  </div>\n);\n\nconst FourOhFour = () => (\n  <div className=\"fourohfour\">\n    <h2>Ruh oh! 404!</h2>\n    <img src=\"/butt.gif\" alt=\"corgi butt\" />\n    <p>Page not found!</p>\n  </div>\n);\n\nconst CorgiMachine = ({ match }) => (\n  <div className=\"machine\">\n    <h2>Corgi Machine</h2>\n    <Switch>\n      <Route\n        exact\n        path={match.path}\n        render={() => (\n          <div>\n            <p>\n              What kind of corgi do you want to produce? Try these on for size:\n            </p>\n            <ul>\n              <li>\n                <Link to={`${match.url}/500/200`}>Long corgi</Link>\n              </li>\n              <li>\n                <Link to={`${match.url}/200/500`}>Tall corgi</Link>\n              </li>\n            </ul>\n            <p>You can also make your own corgis by playing with the url.</p>\n            <ul>\n              <li>\n                <code>machine/width/height</code>\n              </li>\n              <li>\n                <code>machine/dogname/width/height</code>\n              </li>\n              <li>\n                <Link to={`${match.url}/Ein/300/300`}>Here's an example!</Link>\n              </li>\n            </ul>\n            <small>\n              Note that this doesn't have validation, it just cares about the\n              number of routes\n            </small>\n          </div>\n        )}\n      />\n      <Route\n        exact\n        path={`${match.path}/:width/:height`}\n        component={CorgiSizer}\n      />\n      <Route\n        exact\n        path={`${match.path}/:dogName/:width/:height`}\n        component={CorgiSizerWithName}\n      />\n      <Route component={FourOhFour} />\n    </Switch>\n  </div>\n);\n\nconst CorgiSizer = ({ match }) => (\n  <div className=\"sizer\">\n    <img\n      src={`http://placecorgi.com/${match.params.width}/${match.params.height}`}\n      alt={`A ${match.params.width}x${match.params.height} corgi`}\n    />\n  </div>\n);\n\nconst CorgiSizerWithName = ({ match }) => (\n  <div className=\"sizer-with-name\">\n    <h4>{`Hi, my name is ${match.params.dogName}!`}</h4>\n    <CorgiSizer match={match} />\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}